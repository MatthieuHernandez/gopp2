#include "move.h2"

Engine: type = {

    public goban_state: std::array<std::array<i8, 19>, 19> = (0);
    public moves: std::vector<Move> = ();
    public nextMovePlayer: Color;

   operator=:(out this) = {
        nextMovePlayer = Color::Black;
    }

    playMove:(inout this, in m: Move) = {
        moves.push_back(m);
        if !m.pass {
            col:= m.position[0];
            row:= m.position[1];
            goban_state[col][row] = m.color;
            switchPlayer(nextMovePlayer);
        }
    }

    /*numberOfLiberty:(std::array<i8, 2>) -> i16 = {

    }*/

    isValidMove:(inout this, in m: Move) -> bool = {
        if !m.pass {
            col:= m.position[0];
            row:= m.position[1];
            if goban_state[col][row] != 0 {
                return false;
            }
        }
        return true;
    }

    isFinish:(this) -> bool = {
        if moves.ssize() > 1 {
            if moves[moves.size() - 1].pass == true
            && moves[moves.size() - 2].pass == true {
                return true;
            }
        }
        return false;
    }
}

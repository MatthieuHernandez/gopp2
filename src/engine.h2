#include "goban.h2"
#include "move.h2"

Engine: type = {

    public goban: Goban = ();
    public moves: std::vector<Move> = ();
    public nextMovePlayer: Color;

   operator=:(out this) = {
        nextMovePlayer = Color::Black;
    }

    playMove:(inout this, in m: Move) = {
        moves.push_back(m);
        if !m.pass {
            col:= m.stone.col;
            row:= m.stone.row;
            goban.state[col][row] = m.stone;
            switchPlayer(nextMovePlayer);
        }
    }

    /*numberOfLiberties :(stone: Stone, inout liberties: i8 = 0) -> i8 = {
        
        up_color: Color = goban.state[stone.row+1][stone.col];
        up_stone: Stone = (stone.row+1, stone.col, up_color);

        if up_stone.color == Color.None {
            liberties++;
        } else if up_stone.color == stone.color {
            numberOfLiberties(up_stone, liberties);
        }
    }*/

    isValidMove:(inout this, in m: Move) -> bool = {
        if !m.pass {
            col:= m.stone.col;
            row:= m.stone.row;
            if goban.state[col][row].color != Color::None {
                return false;
            }
        }
        return true;
    }

    isFinish:(this) -> bool = {
        if moves.ssize() > 1 {
            if moves[moves.size() - 1].pass == true
            && moves[moves.size() - 2].pass == true {
                return true;
            }
        }
        return false;
    }
}

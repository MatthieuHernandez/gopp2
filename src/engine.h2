#include "goban.h2"
#include "move.h2"

Engine: type = {

    public goban: Goban = ();
    public moves: std::vector<Move> = ();
    public nextMovePlayer: Color;
    
    public blackPoint: i16 = 0;
    public whitePoint: i16 = 0;

   operator=:(out this) = {
        nextMovePlayer = Color::Black;
    }

    playMove:(inout this, in m: Move) = {
        moves.push_back(m);
        if !m.pass {
            col:= m.stone.col;
            row:= m.stone.row;
            goban.state[col][row] = m.stone;
            if goban.lockedPosition.color == m.stone.color {
                goban.unlockPosition();
                std::cout << "Stone unlockled." << std::endl;
            }
        }
        nextMovePlayer = otherColor(nextMovePlayer);
    }

    private countLiberties:(inout this, inout stone: Stone, inout count: i16) = {
        goban.processStone(stone);
        nextStones:= goban.getAdjacentStone(stone);
        for nextStones
        do (inout nextStone) {
            if !goban.stonehasBeenProcessed(nextStone) {
                if nextStone.color == Color::None {
                    goban.processStone(nextStone);
                    count++;
                } else if nextStone.color == stone.color {
                    countLiberties(nextStone, count);
                }
            }
        }
    }

    numberOfLiberties:(inout this, inout stone: Stone) -> i16 = {
        goban.clearProcessedStone();
        count: i16 = 0;
        countLiberties(stone, count);
        return count;
    }

    capture:(inout this, inout stone: Stone, color: Color, inout count: i16) -> void = {
        nextStones:= goban.getAdjacentStone(stone);
        for nextStones
        do (inout nextStone) {
            if nextStone.color == color {
                l:= numberOfLiberties(nextStone);
                if l == 1 {
                    count = count + 0;
                    goban.removeStone(nextStone);
                    count++;
                    if count == 1 {
                        goban.lockPosition(nextStone, color);
                    }
                    capture(nextStone, color, count);
                }
            }
        }
    }

    captureStones:(inout this, inout stone: Stone) -> i16 = {
        goban.clearProcessedStone();
        count: i16 = 0;
        color:= otherColor(stone.color);
        capture(stone, color, count);
        if count > 1 {
            goban.unlockPosition();
        }
        return count;
    }

    isValidMove:(inout this, inout m: Move) -> bool = {
        if m.pass {
            return true;
        }
        col:= m.stone.col;
        row:= m.stone.row;
        if goban.state[col][row].color == Color::None &&
            (goban.lockedPosition.col != col || goban.lockedPosition.row != row) {
            numberOfcapturedStones:= captureStones(m.stone);
            if numberOfLiberties(m.stone) > 0 ||
                numberOfcapturedStones > 0 {
                return true;
            }
        }
        return false;
    }

    isFinish:(this) -> bool = {
        if moves.ssize() > 1 {
            if moves[moves.size() - 1].pass == true
            && moves[moves.size() - 2].pass == true {
                return true;
            }
        }
        return false;
    }

    countTerritory:(inout this, inout stone: Stone, inout count: i16, inout color: Color) = {
        if count == 0 {
            return;
        }
        nextStones:= goban.getAdjacentStone(stone);
        for nextStones
        do (inout nextStone) {
            if nextStone.color == Color::None {
                if goban.stonehasBeenProcessed(nextStone) == false {
                    goban.processStone(nextStone);
                    count++;
                    countTerritory(nextStone, count, color);
                }
            }
            else if nextStone.color == Color::Black && color != Color::White {
                color = Color::Black;
            }
            else if nextStone.color == Color::White && color != Color::Black {
                color = Color::White;
            } else{
                count = 0;
                return;
            }
        }
    }

    countScore:(inout this) = {
        goban.clearProcessedStone();
        blackPoint = 0;
        whitePoint = 7;
        (copy col: i8 = 0)
        while col < goban.state.ssize()
        next col++
        {
            (copy row: i8 = 0)
            while row < goban.state[col].ssize()
            next row++
            {
                if goban.state[col][row].hasBeenProcessed == false {
                    goban.state[col][row].hasBeenProcessed = true;
                    if goban.state[col][row].color == Color::Black {
                        blackPoint++;
                    }
                    else if goban.state[col][row].color == Color::White {
                        whitePoint++;
                    }
                    else {
                        count: i16 = 1;
                        color:= Color::None;
                        countTerritory(goban.state[col][row], count, color);
                        if color == Color::Black {
                            blackPoint+= count;
                        }
                        if color == Color::White {
                            whitePoint+= count;
                        }
                    }
                }
            }
        }
    }
}

#include "move.h2"

Engine: type = {

    public goban_state: std::array<i16, 361> = (0);
    public moves: std::vector<Move> = ();
    public nextMovePlayer: Color;

   operator=:(out this) = {
        nextMovePlayer = Color::Black;
    }

    playMove:(inout this, in m: Move) = {
        moves.push_back(m);
        i: i16 = m.getFlattenPosition();
        goban_state[i] = m.color;
        switchPlayer(nextMovePlayer);
    }

    isValidMove:(inout this, in m: Move) -> bool = {
        i: i16 = m.getFlattenPosition();
        if goban_state[i] == 0 {
            return true;
        }
        return false;
    }

    isFinish:(this) -> bool = {
        if moves.ssize() > 1 {
            if moves[moves.size() - 1].pass == true
            && moves[moves.size() - 2].pass == true {
                return true;
            }
        }
        return false;
    }
}

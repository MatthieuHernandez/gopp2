#include "stone.h2"

Goban: type = {
    public state: std::array<std::array<Stone, 19>, 19> = ();

    public lockedPosition: Stone = ();

    operator=:(out this) = {
        (copy col: i8 = 0)
        while col < state.ssize()
        next col++
        {
            (copy row: i8 = 0)
            while row < state[col].ssize()
            next row++
            {
                state[col][row] = Stone(Color::None, col, row);
            }
        }
    }

    getAdjacentStone:(in this, s: Stone) -> std::vector<Stone>  = {
        // v√©rifier les bounds.
        adjacent_stones: std::vector<Stone> = ();
        if s.col > 0 {
            if !state[s.col-1][s.row].hasBeenProcessed {
                adjacent_stones.push_back(state[s.col-1][s.row]);
            }
        }
        if s.col < 18 {
            if !state[s.col+1][s.row].hasBeenProcessed {
                adjacent_stones.push_back(state[s.col+1][s.row]);
            }
        }
        if s.row > 0 {
            if !state[s.col][s.row-1].hasBeenProcessed {
                adjacent_stones.push_back(state[s.col][s.row-1]);
            }
        }
        if s.row < 18 {
            if !state[s.col][s.row+1].hasBeenProcessed {
                adjacent_stones.push_back(state[s.col][s.row+1]);
            }
        }
        return adjacent_stones;
    }

    stonehasBeenProcessed:(inout this, s: Stone) -> bool = {
        return state[s.col][s.row].hasBeenProcessed;
    }

    processStone:(inout this, s: Stone) = {
        state[s.col][s.row].hasBeenProcessed = true;
    }

    clearProcessedStone:(inout this) = {
        (copy col: i8 = 0)
        while col < state.ssize()
        next col++
        {
            (copy row: i8 = 0)
            while row < state[col].ssize()
            next row++
            {
                state[col][row].hasBeenProcessed = false;
            }
        }
    }

    removeStone:(inout this, s: Stone) = {
        state[s.col][s.row].color = Color::None;
        state[s.col][s.row].hasBeenProcessed = true;
    }

    lockPosition:(inout this, s: Stone, c: Color) = {
        lockedPosition = s;
        lockedPosition.color = c;
    }

    unlockPosition:(inout this) = {
        lockedPosition.color = Color::None;
    }
}
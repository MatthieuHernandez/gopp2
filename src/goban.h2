#include "stone.h2"

// CPP1 workaround: Do not know how to do this in CPP2.
template<class T, int8_t Size>
using State = std::array<std::array<T, Size>, Size>;

Goban:<Size: i8> type = {
    public state: State<Stone, Size> = ();
    public lockedPosition: Stone = ();
    public iterations: i32 = 0;
    private maxIndex: i8 = Size - 1;

    operator=:(out this) = {
        (copy col: i8 = 0)
        while col < state.ssize()
        next col++
        {
            (copy row: i8 = 0)
            while row < state[col].ssize()
            next row++
            {
                state[col][row] = Stone(Color::None, col, row);
            }
        }
    }

    public getAdjacentStone:(inout this, in s: Stone, in processedStones: State<bool, Size>, count: bool = true) -> std::vector<Stone>  = {
        adjacent_stones: std::vector<Stone> = ();
        if s.col > 0 && !processedStones[s.col-1][s.row] {
            adjacent_stones.push_back(state[s.col-1][s.row]);
        }
        if s.col < maxIndex && !processedStones[s.col+1][s.row] {
            adjacent_stones.push_back(state[s.col+1][s.row]);
        }
        if s.row > 0 && !processedStones[s.col][s.row-1] {
            adjacent_stones.push_back(state[s.col][s.row-1]);
        }
        if s.row < maxIndex && !processedStones[s.col][s.row+1] {
                adjacent_stones.push_back(state[s.col][s.row+1]);
        }
        if count {
        iterations += adjacent_stones.size();
        }
        return adjacent_stones;
    }

    public isTrueEye:(in this, in s: Stone) -> bool = {
        if (s.col > 0 && state[s.col-1][s.row].color != s.color) ||
            (s.col < maxIndex && state[s.col+1][s.row].color != s.color) ||
            (s.row > 0 && state[s.col][s.row-1].color != s.color) ||
            (s.row < maxIndex && state[s.col][s.row+1].color != s.color) {
                return false;
        }
        count: i8 = 0;
        if s.col > 0 && s.row > 0 {
            if state[s.col-1][s.row-1].color == s.color {
                count++;
            }
        }
        if s.col > 0  && s.row < maxIndex {
            if state[s.col-1][s.row+1].color == s.color {
                count++;
            }
        }
        if s.col < maxIndex && s.row > 0 {
            if state[s.col+1][s.row-1].color == s.color {
                count++;
            }
        }
        if s.col < maxIndex  && s.row < maxIndex {
            if state[s.col+1][s.row+1].color == s.color {
                count++;
            }
        }
        return count >= 3;
    }

    public removeStone:(inout this, in s: Stone) = {
        state[s.col][s.row].color = Color::None;
    }

    public isLockedPosition:(in this, in s: Stone) -> bool = {
        return lockedPosition.col == s.col &&
            lockedPosition.row == s.row;
    }

    public lockPosition:(inout this, in s: Stone, c: Color) = {
        lockedPosition = s;
        lockedPosition.color = c;
    }

    public unlockPosition:(inout this) = {
        lockedPosition.color = Color::None;
        lockedPosition.row = -1;
        lockedPosition.col = -1;
    }
}

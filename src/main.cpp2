#include "cli_interface.h2"
#include "game.h2"
#include "interface.h2"
#include "../src/window.h"

#ifdef _WIN32
#include "windows.h"
#endif

constexpr bool win32 =
#ifdef _WIN32
    true;
#else
    false;
#endif

void windowsConfig() {
    #ifdef _WIN32
    SetConsoleOutputCP(CP_UTF8);
    #endif
}


void signalHandler(int signal) {
    if (signal == SIGINT) {
        while(isRunning) {
            std::cout << "Cannot stop, saving in progress..." << std::endl;
            std::this_thread::sleep_for(10ms);
        }
        std::exit(0);
    }
}

cliApp:() -> int = {
    windowsConfig();
    signal(SIGINT, signalHandler);
    exit: bool = false;
    cliInterface:= CliInterface();
    game:= Game(cliInterface&);
    do {
        size:= game.getGobanSize();
        players:= game.getPlayerNames();
        selection:= printMenuAndSelect(size, players);
        if selection == 0 {
            cliInterface.clear();
            cliInterface.print("Bye.");
            exit = true;
        } else if selection == 1 {
        if(game.getGobanSize() == 9) {
            game.setGobanSize(13);
        } else if(game.getGobanSize() == 13) {
            game.setGobanSize(19);
        } else if(game.getGobanSize() == 19) {
            game.setGobanSize(9);
        }
        } else if selection == 2 {
            selection:= printPlayersAndSelect(size, Color::Black);
            game.selectPlayer(Color::Black, selection);
            selection = printPlayersAndSelect(size, Color::White);
            game.selectPlayer(Color::White, selection);
            cliInterface.print("Players selected.");
        } else if selection == 3 {
            game.playOne();
        } else if selection == 4 {
            game.trainBlack();
        } else if selection == 5 {
            game.evaluate();
        } else if selection == 9 {
            createAi();
        } else {
            cliInterface.print("Invalid selection.");
        }
    } while !exit;
  return 0;
}


#include <QApplication>

int main(int argc, char *argv[]) {

    if (argc > 1 && static_cast<std::string>(argv[1]) == "nogui") {
        try { // CPP2 workaround: Try catch not yet supported.
            return cliApp();
        } catch (const std::exception& e) {
            std::cerr << "Caught exception: " << e.what() << std::endl;
        }
    }
    else {
        QApplication guiApp(argc, argv);
        Window window;
        window.show();
        return guiApp.exec();
    }
    return 0;
}

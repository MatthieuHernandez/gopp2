#include "goban.h2"
#include "move.h2"

nextMessage: std::string = 0;

setNextMessage:(message: std::string) = {
    nextMessage = message;
}

getNextMessage:() -> std::string = {
    m:= nextMessage;
    nextMessage = "";
    return m;
}

clear:(message: std::string = "") = { std::cout << "\x1B[2J\x1B[H" << message << std::endl; }

clearInput:() = {
    std::cin.clear();
    std::cin.ignore(INT_MAX, '\n');
}

printMenu:() =  {

    clear();
    std::cout << "**************************************************" << std::endl;
    std::cout << "*                   GOPP2 Menu                   *" << std::endl;
    std::cout << "**************************************************" << std::endl;
    std::cout << "* Please select one of the following:            *" << std::endl;
    std::cout << "*                                                *" << std::endl;
    std::cout << "*     1. Start a game                            *" << std::endl;
    std::cout << "*     2. Exit                                    *" << std::endl;
    std::cout << "**************************************************" << std::endl;
    std::cout << std::endl << getNextMessage() << std::endl;
}

getInputMenu:() -> i32 = {
    input: i32 = 0;
    std::cout << "> ";
    std::cin >> input;
    clearInput();
    return input;
}

getInputMove:(player: Color) -> Move = {
    input: std::string = "";
    std::cout << std::endl << colorName(player) << " to play:" << std::endl << "> ";
    std::cin >> input;
    clearInput();
    if(input == "pass") {
        setNextMessage("Player pass.");
        m: Move = (player, 0, 0, "pass", true);
        return m;
    }
    input[0] = std::toupper(input[0]);
    if(input.ssize() < 2 || input.ssize() > 3 ||
       input[0] < 'A' || input[0] > 'T' || input[0] == 'I' ||
       (input.ssize() == 2 && (input[1] < '1' || input[1] > '9')) ||
       (input.ssize() == 3 && (input[1] != '1' || input[2] < '0' || input[2] > '9'))) {
        std::cout << "\033[A\033[A\033[A\033[A\033[K" << "Invalid Move." << std::endl;
        return getInputMove(player);
    }
    col: i8 = 0;
    col = input[0] - 65;
    if col > 8 { // No I column
        col --;
    }
    row: i8 = 0;
    if input.ssize() == 2 {
        row = input[1] - 49;
    } else {
        row = ((input[1] - 48) * 10) + (input[2] - 49);
    }
    m: Move = (player, col, row, input, false);
    return m;
}

// Make it a coroutine without row and col parameter
printIntersection:(row: i16, col: i16) = {
    if (row == 15 && (col == 3 || col == 9 || col == 15)) ||
       (row == 9 && (col == 3 || col == 9 || col == 15)) ||
       (row ==  3 && (col == 3 || col == 9 || col == 15)) {
        std::cout << "─●";
    } else {
        if row == 18 {
            if col == 0 {
                std::cout << " ┌";
            } 
            else if col == 18 {
                std::cout << "─┐";
            } else {
                std::cout << "─┬";
            }
        } else if row == 0 {
            if col == 0 {
                std::cout << " └";
            } else if col == 18 {
                std::cout << "─┘";
            } else {
                std::cout << "─┴";
            }
        } else {
            if col == 0 {
                std::cout << " ├";
            } else if col == 18 {
                std::cout << "─┤";
            } else {
                std::cout << "─┼";
            }
        }
    }
}

printGoban:(goban: Goban) = {
    // First line
    std::cout << "     A B C D E F G H J K L M N O P Q R S T " << std::endl;
    row: i8 = 18;
    while row > -1
    next row--
    {
        //v: i8 = row + 1
        if row < 9 {
            std::cout << "  " << (row + 1) as std::string <<" ";
        } else {
             std::cout << " " << (row + 1) as std::string <<" ";
        }
        col: i8 = 0;
        while col <= 18
        next col++
        {
            if goban.state[col][row].color == 1 {
                std::cout << "⚫";
            } else if goban.state[col][row].color == 2 {
                std::cout << "⚪";
            }
            else if goban.state[col][row].color == 0 {
                printIntersection(row, col);
            }
        }
        std::cout << std::endl;
    }
    std::cout << std::endl << getNextMessage() << std::endl;
}



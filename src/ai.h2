#include "player.h2"
#include "io.h2"
#include <snn/neural_network/StraightforwardNeuralNetwork.hpp>

createAi:() = {
    layers: std::vector<snn::LayerModel> = (snn::Input(1, 9, 9),
                                            snn::FullyConnected(100, snn::activation::ReLU),
                                            snn::FullyConnected(100, snn::activation::ReLU),
                                            snn::FullyConnected(100, snn::activation::ReLU),
                                            snn::FullyConnected(81, snn::activation::tanh));
    optimizer:= snn::StochasticGradientDescent(2e-4f, 0.6f);
    neuralNetwork:= snn::StraightforwardNeuralNetwork(layers, optimizer);
    neuralNetwork.saveAs("./snn_models/9x9/model_v2.snn");
}

Ai: type = {
    this: Player;
    public randomness: i16; // Randomly select a move from the N best moves.

    private modelPath: std::string;
    private neuralNetwork: snn::StraightforwardNeuralNetwork;
    private inputs: snn::vector2D<float>;
    private moves: std::vector<i16>;
    private lastGameWon: std::deque<int>;
    private numberOfGames: const size_t = 1000; // TO calculate winrate.
    private sumOfLastGameWon: size_t;

    public operator=:(out this, c: Color, r: i16, path: std::string) = {
        Player = (c);
        randomness = r;
        modelPath = path;
        neuralNetwork = snn::StraightforwardNeuralNetwork::loadFrom(modelPath);
        inputs = ();
        moves = ();
        lastGameWon = ();
        sumOfLastGameWon = 0;
        inputs.reserve(300);
        moves.reserve(300);
    }

    public operator=:(out this, that) = {
        Player = (that);
        randomness = that.randomness;
        neuralNetwork = that.neuralNetwork;
        inputs = that.inputs;
        moves = that.moves;
        modelPath = that.modelPath;
        lastGameWon = that.lastGameWon;
        sumOfLastGameWon = that.sumOfLastGameWon;
    }

    public summary:(in this) -> std::string = {
        return neuralNetwork.summary();
    }

    private getGobanState:<Size: i8>(in this, in state: State<Stone, Size>) -> std::vector<float> = {
        vec: std::vector<float> = ();
        size:= state.ssize() * state.ssize();
        vec.reserve(size);
        (copy col: i8 = 0)
        while col < state.ssize()
        next col++
        {
            (copy row: i8 = 0)
            while row < state[col].ssize()
            next row++
            {
                if state[col][row].color == color {
                    vec.push_back(1.0);
                }
                else if state[col][row].color == Color::None {
                    vec.push_back(0.0);
                }
                else {
                    vec.push_back(-1.0);
                }
            }
        }
        return vec;
    }

    private chooseBestMove:<Size: i8>(inout this, in nn_output: std::vector<float>) -> Move = {
        index: i16 = 0;
        estimatedPositions: std::vector<Stone> = ();
        numberOfPositions:= Size * Size;
        estimatedPositions.reserve(numberOfPositions);
        (copy col: i8 = 0)
        while col < Size
        next col++
        {
            (copy row: i8 = 0)
            while row < Size
            next row++
            {
                estimation:= nn_output[index];
                stone:=  Stone(color, col, row, estimation);
                estimatedPositions.push_back(stone);
                index++;
            }
        }
        std::ranges::sort(estimatedPositions, std::ranges::greater(), Stone::estimation&);
        dist: std::uniform_int_distribution<i64> = (0, 4);
        s:= estimatedPositions[dist(rng)];
        return Move(s);
    }

    private getMove:<Size: i8>(inout this, inout engine: Engine<Size>) -> Move = {
        input:= getGobanState<Size>(engine.goban.state);
        output:= neuralNetwork.computeOutput(input);
        m:= chooseBestMove<Size>(output);
        engine.closerValidMove(m);
        moveIndex:= m.stone.getIndex<Size>();
        if moveIndex >= 0 {
            inputs.push_back(input);
            moves.push_back(moveIndex);
        }
        return m;
    }

    public getMove:(override inout this, inout engine: Engine<9>) -> Move = {
        return getMove<9>(engine);
    }

    public getMove:(override inout this, inout engine: Engine<19>) -> Move = {
        return getMove<19>(engine);
    }

    public train:(inout this, gobanSize: i16) = {
        size:= gobanSize * gobanSize;
        expectedValue: float = -0.99;
        if hasWon { // CPP2 workaround: Conditional operator not yet supported.
            expectedValue = 0.99;
        }
        (copy i: i16 = 0)
        while i < inputs.ssize()
        next i++
        {
            expected_output:= std::vector<float>(size, NAN);
            (copy j: i16 = 0)
            while j < size
            next j++
            {
                if inputs[i][j] != 0.0 {
                    expected_output[j] = 0;
                }
            }
            expected_output[moves[i]] = expectedValue;
            neuralNetwork.trainOnce(inputs[i], expected_output);
        }
    }
    
    public save:(inout this) = {
        neuralNetwork.saveAs(modelPath);
    }

    public processStartGame:(override inout this) = {
        inputs.clear();
        moves.clear();
    }

    public processEndGame:(override inout this) = {
        if hasWon { // CPP2 workaround: Conditional operator not yet supported.
            lastGameWon.push_back(1);
            sumOfLastGameWon += 1;
        } else {
            lastGameWon.push_back(0);
        }
        if (lastGameWon.size() > numberOfGames) {
            sumOfLastGameWon -= lastGameWon.front();
            lastGameWon.pop_front();
        }
        if lastGameWon.ssize() > 100 {
            winrate: float = sumOfLastGameWon / (float)(lastGameWon.size()) * 100.0f;
            str: std::string = std::to_string(winrate);
            setNextMessage("AI winrate: "+ str +" %");
        } else {
            setNextMessage("AI winrate: ...");
        }
    }
}

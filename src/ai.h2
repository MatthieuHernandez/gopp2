#include "player.h2"
#include "io.h2"
#include <snn/neural_network/StraightforwardNeuralNetwork.hpp>

createAi:() = {
    layers: std::vector<snn::LayerModel> = (snn::Input(1, 9, 9),
                                            snn::FullyConnected(500, snn::activation::ReLU),
                                            snn::FullyConnected(81, snn::activation::tanh));
    optimizer:= snn::StochasticGradientDescent(1e-5f, 0.3f);
    neuralNetwork:= snn::StraightforwardNeuralNetwork(layers, optimizer);
    neuralNetwork.saveAs("./snn_models/9x9/model_v1.snn");
}

Ai: type = {
    this: Player;
    private modelPath: std::string;
    private neuralNetwork: snn::StraightforwardNeuralNetwork;
    private inputs: snn::vector2D<float>;
    private moves: std::vector<i16>;

    private numberOfGoodMoves: i32 = 0;
    private numberOfAverageMoves: i32 = 0;
    private numberOfBadMoves: i32 = 0;

    public operator=:(out this, c: Color, path: std::string) = {
        Player = (c);
        modelPath = path;
        neuralNetwork = snn::StraightforwardNeuralNetwork::loadFrom(modelPath);
        inputs = ();
        moves = ();
        inputs.reserve(300);
        moves.reserve(300);
    }

    public operator=:(out this, that) = {
        Player = (that);
        neuralNetwork = that.neuralNetwork;
        inputs = that.inputs;
        moves = that.moves;
        modelPath = that.modelPath;
        numberOfGoodMoves = that.numberOfGoodMoves;
        numberOfAverageMoves = that.numberOfAverageMoves;
        numberOfBadMoves = that.numberOfBadMoves;
    }

    public summary:(in this) -> std::string = {
        return neuralNetwork.summary();
    }

    private getGobanState:<Size: i8>(in this, in state: State<Stone, Size>) -> std::vector<float> = {
        vec: std::vector<float> = ();
        size:= state.ssize() * state.ssize();
        vec.reserve(size);
        (copy col: i8 = 0)
        while col < state.ssize()
        next col++
        {
            (copy row: i8 = 0)
            while row < state[col].ssize()
            next row++
            {
                if state[col][row].color == color {
                    vec.push_back(1.0);
                }
                else if state[col][row].color == Color::None {
                    vec.push_back(0.0);
                }
                else {
                    vec.push_back(-1.0);
                }
            }
        }
        return vec;
    }

    private chooseBestMove:<Size: i8>(inout this, in nn_output: std::vector<float>) -> Move = {
        index: i16 = 0;
        goodMoves: std::vector<std::array<i8, 2>> = ();
        averageMoves: std::vector<std::array<i8, 2>> = ();
        badMoves: std::vector<std::array<i8, 2>> = ();
        (copy col: i8 = 0)
        while col < Size
        next col++
        {
            (copy row: i8 = 0)
            while row < Size
            next row++
            {
                a: std::array<i8, 2> = (col, row);
                if nn_output[index] > 0.5f {
                    goodMoves.push_back(a);
                } else if goodMoves.empty() && nn_output[index] > 0.0f {
                    averageMoves.push_back(a);
                } else if goodMoves.empty() && averageMoves.empty() {
                    badMoves.push_back(a);
                }
                index++;
            }
        }
        if !goodMoves.empty() {
            numberOfGoodMoves++;
            dist: std::uniform_int_distribution<i64> = (0, goodMoves.ssize() - 1);
            goodMove:= goodMoves[dist(rng)];
            m:= Move(color, goodMove[0], goodMove[1]);
            return m;
        }
        if !averageMoves.empty() {
            numberOfAverageMoves++;
            dist: std::uniform_int_distribution<i64> = (0, averageMoves.ssize() - 1);
            averageMove:= averageMoves[dist(rng)];
            m:= Move(color, averageMove[0], averageMove[1]);
            return m;
        }
        if !badMoves.empty() {
            numberOfBadMoves++;
            dist: std::uniform_int_distribution<i64> = (0, badMoves.ssize() - 1);
            badMove:= badMoves[dist(rng)];
            m:= Move(color, badMove[0], badMove[1]);
            return m;
        }
        return pass(color);
    }

    private getMove:<Size: i8>(inout this, inout engine: Engine<Size>) -> Move = {
        input:= getGobanState<Size>(engine.goban.state);
        output:= neuralNetwork.computeOutput(input);
        m:= chooseBestMove<Size>(output);
        if m.pass {
            return m;
        }
        engine.closerValidMove(m);
        moveIndex:= m.stone.getIndex<Size>();
        if moveIndex >= 0 {
            inputs.push_back(input);
            moves.push_back(moveIndex);
        }
        return m;
    }

    public getMove:(override inout this, inout engine: Engine<9>) -> Move = {
        return getMove<9>(engine);
    }

    public getMove:(override inout this, inout engine: Engine<19>) -> Move = {
        return getMove<19>(engine);
    }

    public train:(inout this, gobanSize: i16) = {
        size:= gobanSize * gobanSize;
        expectedValue: float = -1.0;
        if hasWon { // CPP2 workaround: Conditional operator not yet supported.
            expectedValue = 1.0;
        }
        (copy i: i16 = 0)
        while i < inputs.ssize()
        next i++
        {
            expected_output:= std::vector<float>(size, 0);
            (copy j: i16 = 0)
            while j < size
            next j++
            {
                if inputs[i][j] != 0.0 {
                    expected_output[j] = 0;
                }
            }
            expected_output[moves[i]] = expectedValue;
            neuralNetwork.trainOnce(inputs[i], expected_output);
        }
        inputs = ();
        moves = ();
    }
    
    public save:(inout this) = {
        neuralNetwork.saveAs(modelPath);
    }

    public processEndGame:(override inout this) = {
        state: std::string = "lost";
        if hasWon { // CPP2 workaround: Conditional operator not yet supported.
            state = "won";
        }
        if color == Color::Black {
            setNextMessage("Black "+ state + ":");
        } else {
            setNextMessage("White "+ state + ":");
        }
        setNextMessage("  " + numberOfGoodMoves as std::string + " moves were considered good.");
        setNextMessage("  " + numberOfAverageMoves as std::string + " moves were considered average.");
        setNextMessage("  " + numberOfBadMoves as std::string + " moves were considered bad.");
        numberOfGoodMoves = 0;
        numberOfAverageMoves = 0;
        numberOfBadMoves = 0;
    }
}

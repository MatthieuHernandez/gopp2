#include "player.h2"
#include "io.h2"
#include <snn/neural_network/StraightforwardNeuralNetwork.hpp>

createAi:() = {
    layers: std::vector<snn::LayerModel> = (snn::Input(1, 9, 9),
                                            snn::Convolution(16, 3, snn::activation::ReLU),
                                            snn::Convolution(32, 3, snn::activation::ReLU),
                                            snn::Convolution(64, 3, snn::activation::ReLU),
                                            snn::Convolution(128, 3, snn::activation::ReLU),
                                            snn::FullyConnected(81, snn::activation::tanh));
    /*layers: std::vector<snn::LayerModel> = (snn::Input(1, 9, 9),
                                            snn::FullyConnected(300, snn::activation::ReLU),
                                            snn::FullyConnected(300, snn::activation::ReLU),
                                            snn::FullyConnected(81, snn::activation::tanh));*/
    optimizer:= snn::StochasticGradientDescent(1e-6f, 0.0f);
    neuralNetwork:= snn::StraightforwardNeuralNetwork(layers, optimizer);
    neuralNetwork.saveAs("./snn_models/9x9/model_v02.snn");
    if neuralNetwork.isValid() != snn::errorType::noError {
        std::cout << "INVALID MODEL !" << std::endl;
        std::exit(0);
    }
    setNextMessage("AI created.");
}                                                                                                                               

Ai: type = {
    this: Player;
    public randomness: i16; // Randomly select a move from the N best moves.

    private modelPath: std::string;
    private neuralNetwork: snn::StraightforwardNeuralNetwork;
    private optimizer: std::shared_ptr<snn::internal::StochasticGradientDescent>;
    private inputs: snn::vector2D<float>;
    private moves: std::vector<i16>;
    private lastGameWon: std::deque<int>;
    private numberOfGames: const size_t = 1000; // To calculate winrate.
    private sumOfLastGameWon: size_t = 0;
    private defaultLearningRate: float = 1e-6f;
    private previousWinrate: float = 0.0f;
    private isBetter: bool = false;

    public operator=:(out this, c: Color, r: i16, path: std::string) = {
        Player = (c);
        randomness = r;
        modelPath = path;
        neuralNetwork = snn::StraightforwardNeuralNetwork::loadFrom(modelPath);
        optimizer = std::static_pointer_cast<snn::internal::StochasticGradientDescent>(neuralNetwork.optimizer);
        inputs = ();
        moves = ();
        lastGameWon = ();
        inputs.reserve(300);
        moves.reserve(300);
    }

    public operator=:(out this, that) = {
        Player = (that);
        randomness = that.randomness;
        neuralNetwork = that.neuralNetwork;
        optimizer = that.optimizer;
        inputs = that.inputs;
        moves = that.moves;
        modelPath = that.modelPath;
        lastGameWon = that.lastGameWon;
        sumOfLastGameWon = that.sumOfLastGameWon;
        defaultLearningRate = that.defaultLearningRate;
        previousWinrate = that.previousWinrate;
        isBetter = that.isBetter;
    }

    public summary:(in this) -> std::string = {
        return neuralNetwork.summary();
    }

    private getGobanState:<Size: i8>(in this, in state: State<Stone, Size>) -> std::vector<float> = {
        vec: std::vector<float> = ();
        size:= state.ssize() * state.ssize();
        vec.reserve(size);
        (copy col: i8 = 0)
        while col < state.ssize()
        next col++
        {
            (copy row: i8 = 0)
            while row < state[col].ssize()
            next row++
            {
                if state[col][row].color == color {
                    vec.push_back(1.0);
                }
                else if state[col][row].color == Color::None {
                    vec.push_back(0.0);
                }
                else {
                    vec.push_back(-1.0);
                }
            }
        }
        return vec;
    }

    private chooseBestMove:<Size: i8>(inout this, in nn_output: std::vector<float>, inout engine: Engine<Size>) -> Move = {
        index: i16 = 0;
        estimatedPositions: std::vector<Stone> = ();
        numberOfPositions:= Size * Size;
        estimatedPositions.reserve(numberOfPositions);
        (copy col: i8 = 0)
        while col < Size
        next col++
        {
            (copy row: i8 = 0)
            while row < Size
            next row++
            {
                estimation:= nn_output[index];
                stone:=  Stone(color, col, row, estimation);
                estimatedPositions.push_back(stone);
                index++;
            }
        }
        std::ranges::sort(estimatedPositions, std::ranges::greater(), Stone::estimation&);
        dist: std::uniform_int_distribution<i64> = (0, randomness-1);
        picked_index:= dist(rng);
        s:= estimatedPositions[picked_index];
        m:= Move(s);
        engine.closerValidMove(m);
        return m;
        /*if engine.isValidMove(m) {
            engine.closerValidMove(m);
            return m;
        }
        (copy index2: i16 = 0)
        while index2 < numberOfPositions
        next index2++
        {
            if (index2 != picked_index) {
                s2:= estimatedPositions[index2];
                m2:= Move(s2);
                if engine.isValidMove(m2) {
                    return m2;
                }
            }
        }
        engine.closerValidMove(m);
        return m;*/
    }

    private getMove:<Size: i8>(inout this, inout engine: Engine<Size>) -> Move = {
        input:= getGobanState<Size>(engine.goban.state);
        output:= neuralNetwork.computeOutput(input);
        m:= chooseBestMove<Size>(output, engine);
        moveIndex:= m.stone.getIndex<Size>();
        if moveIndex >= 0 {
            inputs.push_back(input);
            moves.push_back(moveIndex);
        }
        return m;
    }

    public getMove:(override inout this, inout engine: Engine<9>) -> Move = {
        return getMove<9>(engine);
    }

    public getMove:(override inout this, inout engine: Engine<19>) -> Move = {
        return getMove<19>(engine);
    }

    private computeLearningRate:(inout this)-> float = {
        learningRate:= defaultLearningRate;
        if randomness == 1 {
            learningRate *= 0.75;
        } else {
            learningRate *= 1.25;
        }
        /*if hasWon {
            learningRate *= 0.9;
        }
        else {
            learningRate *= 1.1;
        }*/
        if inputs.ssize() < 40 {
           learningRate *= 16;
        }
        else if inputs.ssize() < 50 {
            learningRate *= 8;
        }
        else if inputs.ssize() < 60 {
            learningRate *= 4;
        }
        else if inputs.ssize() < 70 {
            learningRate *= 2;
        } else {
            learningRate *= 1;
        }
        return learningRate;
    }

    public train:(inout this, gobanSize: i16) = {
        if neuralNetwork.isValid() != snn::errorType::noError {
            std::cout << "INVALID MODEL !" << std::endl;
            std::exit(0);
        }
        optimizer*.learningRate = computeLearningRate();
        size:= gobanSize * gobanSize;
        expectedValue: float = -1.0f;
        if hasWon { // CPP2 workaround: Conditional operator not yet supported.
            expectedValue = 1.0f;
        }
        (copy i: i16 = 0)
        while i < inputs.ssize()
        next i++
        {
            expected_output:= std::vector<float>(size, NAN);
            weighting:= std::vector<float>(size, 1.0f);
            (copy j: i16 = 0)
            while j < size
            next j++
            {
                if inputs[i][j] != 0.0 {
                    expected_output[j] = 0;
                    weighting[j] = 1e-3f;
                }
            }
            expected_output[moves[i]] = expectedValue;
            neuralNetwork.trainOnce(inputs[i], expected_output, weighting);
        }
    }

    public save:(inout this) = {
        neuralNetwork.saveAs(modelPath);
    }
    
    public saveIfBetter:(inout this) = {
        if isBetter {
            save();
            isBetter = false;
        }
    }

    private calculateWinrate:(in this) -> float = {
        return sumOfLastGameWon / (float)(lastGameWon.size());
    }

    public processStartGame:(override inout this) = {
        inputs.clear();
        moves.clear();
        currentWinRate:= calculateWinrate();
        if lastGameWon.ssize() == numberOfGames
        && currentWinRate > previousWinrate {
            previousWinrate = currentWinRate;
            isBetter = true;

        }
    }

    public processEndGame:(override inout this) = {
        if randomness == 1 { // Only process on "accurate" game.
            if hasWon { // CPP2 workaround: Conditional operator not yet supported.
                lastGameWon.push_back(1);
                sumOfLastGameWon += 1;
            } else {
                lastGameWon.push_back(0);
            }
            if (lastGameWon.size() > numberOfGames) {
                sumOfLastGameWon -= lastGameWon.front();
                lastGameWon.pop_front();
            }
        }
        if lastGameWon.ssize() > 100 {
            setNextMessage("AI winrate: "+ std::to_string(calculateWinrate() * 100.0f) +" %");
        } else {
            setNextMessage("AI winrate: ...");
        }
        oss: std::ostringstream = ();
        oss << "AI learning rate: " << std::scientific << std::setprecision(2) << optimizer*.learningRate;
        setNextMessage(oss.str());
        setNextMessage("AI randomness: " + std::to_string(randomness));
    }
}

#include "engine.h2"
#include "move.h2"
#include "io.h2"
#include "player.h2"

Game : type = {

    player1: std::shared_ptr<Player>; // CPP2 workaround: Not able to make unique_prtr work.
    player2: std::shared_ptr<Player>;

    operator=:(out this, p1: std::shared_ptr<Player>, p2: std::shared_ptr<Player>) = {
        player1 = (p1);
        player2 = (p2);
    }

    play:(in this) = {
        engine: Engine = ();
        isValidMove: bool = true;
        (copy moveNumber:= 1)
        do {
            // clear();
            printGoban(engine.goban);
            m: Move = (); // CPP2 workaround: Not able to make unique_prtr work.
            if moveNumber % 2 == 1 {
                m = player1*.getMove(engine);
            } else {
                m = player2*.getMove(engine);
            }
            isValidMove = engine.isValidMove(m);
            if isValidMove {
                engine.playMove(m);
                setNextMessage(colorName(m.stone.color) + " played " + m.name + ".");
            } else {
                setNextMessage(colorName(m.stone.color) + " cannot play " + m.name + ".");
            }
        moveNumber++;
        } while !engine.isFinish();
        engine.countScore();
        if (engine.blackPoint > engine.whitePoint) {
            setNextMessage("Black win " + engine.blackPoint as std::string + " to " + engine.whitePoint as std::string + ".5.");
        }
        else {
            setNextMessage("White win " + engine.whitePoint as std::string + ".5 to " + engine.blackPoint as std::string + ".");
        }
        printGoban(engine.goban);
        waitInput();
    }
}
#include "engine.h2"
#include "move.h2"
#include "io.h2"
#include "player.h2"
#include "human.h2"
#include "dumb.h2"
#include "random.h2"
#include "ai.h2"
#include "itself.h2"

isRunning: bool = false;

Game: type = {

    private blackPlayer: std::shared_ptr<Player> = nullptr; // CPP2 workaround: Not able to make unique_ptr work.
    private whitePlayer: std::shared_ptr<Player> = nullptr;
    private gobanSize: i8 = 9;

    public getGobanSize:(in this) -> i8 = {
        return gobanSize;
    }

    private getPlayerName:(player: std::shared_ptr<Player>) -> std::string = {
        human:= std::dynamic_pointer_cast<Human>(player); // CPP2 workaround: keyword "as" not working.
        if human != nullptr {
            return "Human";
        }
        dumb:= std::dynamic_pointer_cast<Dumb>(player);
        if dumb != nullptr {
            return "Dumb";
        }
        random:= std::dynamic_pointer_cast<Random>(player);
        if random != nullptr {
            return "Random";
        }
        ai:= std::dynamic_pointer_cast<Ai>(player);
        if ai != nullptr {
            return "AI";
        }
        itself:= std::dynamic_pointer_cast<Itself>(player);
        if itself != nullptr {
            return "Itself";
        }
        return "None";
    }

    public getPlayerNames:(in this) -> std::string = {
        p1:= getPlayerName(blackPlayer);
        p2:= getPlayerName(whitePlayer);
        return p1 +" vs " + p2;
    }

    public changeGobanSize:(inout this) = {
        if gobanSize != 9 {
            gobanSize = 9;
        } else {
            gobanSize = 19;
        }
    }

    private selectPlayer:(in this, color: Color, player: std::shared_ptr<Player>) -> std::shared_ptr<Player> = {
        selection:= printPlayersAndSelect(gobanSize, color);
        if(selection == "") {
            return nullptr;
        }
        if (selection == "-1") {
            ai:= std::dynamic_pointer_cast<Ai>(player);
            return shared.new<Itself>(color, 4, ai*);
        }
        if(selection == "0") {
            return shared.new<Human>(color);
        }
        if(selection == "1") {
            return shared.new<Dumb>(color);
        }
        if(selection == "2") {
            return shared.new<Random>(color);
        }
        ai:= shared.new<Ai>(color, 1, selection);
        clear();
        std::cout << ai*.summary() << std::endl;
        waitInput();
        clear();
        return ai;
    }

    public selectPlayers:(inout this) = {
        blackPlayer = selectPlayer(Color::Black, nullptr);
        whitePlayer = selectPlayer(Color::White, blackPlayer);
        setNextMessage("Players selected.");
    }

    private hasValidPlayer:(in this) -> bool = {
        if blackPlayer == nullptr || whitePlayer == nullptr {
            setNextMessage("No player selected.");
            return false;
        }
        return true;
    }

    private setAiRandomness:(inout this, r: i16) = {
        ai1:= std::dynamic_pointer_cast<Ai>(blackPlayer);  // CPP2 workaround: keyword "as" not working.
        if ai1 != nullptr {
            ai1*.randomness = r;
        }
        ai2:= std::dynamic_pointer_cast<Ai>(whitePlayer);  // CPP2 workaround: keyword "as" not working.
        if ai2 != nullptr {
            ai2*.randomness = r;
        }
    }

    private play:<verbose: bool, Size: i8>(inout this, inout engine: Engine<Size>) = {
        start:= std::chrono::high_resolution_clock::now();
        blackPlayer*.processStartGame();
        whitePlayer*.processStartGame();
        moveNumber: i16 = 1;
        do {
            if constexpr verbose {
                clear();
                printGoban<Size>(engine.goban);
            }
            m: Move = (); // CPP2 workaround: Not able to make unique_ptr work.
            if moveNumber % 2 == 1 {
                m = blackPlayer*.getMove(engine);
            } else {
                m = whitePlayer*.getMove(engine);
            }
            if engine.isValidMove(m) {
                engine.playMove(m);
                moveNumber++;
                if constexpr verbose {
                    setNextMessage(colorName(m.stone.color) + " played " + m.name() + ".");
                }
            } else {
                if constexpr verbose {
                    setNextMessage(colorName(m.stone.color) + " cannot play " + m.name() + ".");
                }
            }
            if (moveNumber >= 999 || (moveNumber >= 299 && gobanSize == 9)) { // Only to prevent an eventual triple ko.
                break;
            }
        } while !engine.isFinish();
        engine.countScore();
        setNextMessage("The game ends after " + moveNumber as std::string + " moves.");
        if (engine.blackPoint > engine.whitePoint) {
            blackPlayer*.hasWon = true;
            whitePlayer*.hasWon = false;
            setNextMessage("Black win " + engine.blackPoint as std::string + " to " + engine.whitePoint as std::string + ".5.");
        } else {
            whitePlayer*.hasWon = true;
            blackPlayer*.hasWon = false;
            setNextMessage("White win " + engine.whitePoint as std::string + ".5 to " + engine.blackPoint as std::string + ".");
        }
        stop:= std::chrono::high_resolution_clock::now();
        duration:= std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count();
        setNextMessage("The game lasted " + duration as std::string + " ms.");
        setNextMessage("After " + engine.goban.iterations as std::string + " iterations.");
        blackPlayer*.processEndGame();
        whitePlayer*.processEndGame();
        clear();
        printGoban<Size>(engine.goban);
        /*if ((engine.blackPoint > 60 && engine.blackPoint < 81)
            || (engine.whitePoint > 68 && engine.whitePoint < 88)) {
            waitInput();
        }*/
    }

    public playOne:(inout this) = {
        if !hasValidPlayer() {
            return;
        }
        if gobanSize == 9 {
            e: Engine<9> = ();
            play<true, 9>(e);
            assert(e&);  // CPP2 workaround: Fix inout.
        } else if gobanSize == 19 {
            e: Engine<19> = ();
            play<true, 19>(e);
            assert(e&);  // CPP2 workaround: Fix inout.
        } else {
            return;
        }
        waitInput();
        setNextMessage("Game was played.");
    }
    
    private switchPlayerColor:(inout this) = {
        blackPlayer*.setColor(Color::White);
        whitePlayer*.setColor(Color::Black);
        std::swap(blackPlayer, whitePlayer);
    }

    public trainBlack:(inout this) = {
        if !hasValidPlayer() {
            return;
        }
        player1:= std::dynamic_pointer_cast<Ai>(blackPlayer); // CPP2 workaround: keyword "as" not working.
        if player1 == nullptr {
            setNextMessage("Black player should be an AI.");
            return;
        }
        i: i32 = 0;
        while true
        {
            if gobanSize == 9 {
                engine: Engine<9> = ();
                play<false, 9>(engine);
                player1*.train<9>(engine);
            } else if gobanSize == 19 {
                engine: Engine<19> = ();
                play<false, 19>(engine);
                player1*.train<19>(engine);
            } else{
                return;
            }
            switchPlayerColor();
            if i % 100 == 0 {
                isRunning = true;
                player1*.save();
                isRunning = false;
            }
            i++;
        }
        if i%2 == 1 {
            switchPlayerColor();
        }
        setNextMessage("AI trained.");
    }

    public evaluate:(inout this) = {
        if !hasValidPlayer() {
            return;
        }
        blackHuman:= std::dynamic_pointer_cast<Human>(blackPlayer); // CPP2 workaround: keyword "as" not working.
        whiteHuman:= std::dynamic_pointer_cast<Human>(blackPlayer);
        if blackHuman != nullptr || whiteHuman != nullptr {
            setNextMessage("Cannot evaluated with human players.");
            return;
        }
        setAiRandomness(1);
        player1:= blackPlayer;
        numberOfGame: i16 = 1000;
        numberOfGameWon: i16 = 0;
        clear();
        (copy i: i32 = 0)
        while i < numberOfGame
        next i++
        {
            if i == (numberOfGame / 2) {
                switchPlayerColor();
            }
            if gobanSize == 19 {
                e: Engine<19> = ();
                play<false, 19>(e);
                assert(e&);  // CPP2 workaround: Fix inout.
            } else if gobanSize == 9 {
                e: Engine<9> = ();
                play<false, 9>(e);
                assert(e&);  // CPP2 workaround: Fix inout.
            }else{
                return;
            }
            if player1*.hasWon {
                numberOfGameWon++;
            }
        }
        setNextMessage("The first player won " + numberOfGameWon as std::string +
                    "/" + numberOfGame as std::string + " games againt the 2nd player.");
        switchPlayerColor();
    }
}

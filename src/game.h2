#include "engine.h2"
#include "move.h2"
#include "io.h2"
#include "player.h2"
#include "human.h2"
#include "random.h2"
#include "ai.h2"

isSaving: bool = false;

Game : type = {

    private blackPlayer: std::shared_ptr<Player> = nullptr; // CPP2 workaround: Not able to make unique_prtr work.
    private whitePlayer: std::shared_ptr<Player> = nullptr;

    private selectPlayer:(color: Color) -> std::shared_ptr<Player> = {
        selection:= printPlayersAndSelect(color);
        if(selection == "") {
            return nullptr;
        }
        if(selection == "0") {
            return shared.new<Human>(color);
        }
        if(selection == "1") {
            return shared.new<Random>(color);
        }
        ai:= shared.new<Ai>(color, selection);
        clear();
        std::cout << ai*.summary() << std::endl;
        waitInput();
        clear();
        return ai;
    }

    public selectPlayers:(inout this) = {
        blackPlayer = selectPlayer(Color::Black);
        whitePlayer = selectPlayer(Color::White);
        setNextMessage("Players selected.");
    }

    private hasValidPlayer:(in this) -> bool = {
        if blackPlayer == nullptr || whitePlayer == nullptr {
            setNextMessage("No player selected.");
            return false;
        }
        return true;
    }

    private play: <verbose: bool>(inout this) = {
        start:= std::chrono::high_resolution_clock::now();
        engine: Engine = ();
        moveNumber: i16 = 1;
        do {
            if constexpr verbose {
                clear();
                printGoban(engine.goban);
            }
            m: Move = (); // CPP2 workaround: Not able to make unique_prtr work.
            if moveNumber % 2 == 1 {
                m = blackPlayer*.getMove(engine);
            } else {
                m = whitePlayer*.getMove(engine);
            }
            if engine.isValidMove(m) {
                engine.playMove(m);
                moveNumber++;
                if constexpr verbose {
                    setNextMessage(colorName(m.stone.color) + " played " + m.name + ".");
                }
            } else {
                if constexpr verbose {
                    setNextMessage(colorName(m.stone.color) + " cannot play " + m.name + ".");
                }
            }
            if (moveNumber >= 1000) { // Only to prevent an eventual triple ko.
                break;
            }
        } while !engine.isFinish();
        engine.countScore();
        setNextMessage("The game ends after " + moveNumber as std::string + " moves.");
        if (engine.blackPoint > engine.whitePoint) {
            blackPlayer*.hasWon = true;
            whitePlayer*.hasWon = false;
            setNextMessage("Black win " + engine.blackPoint as std::string + " to " + engine.whitePoint as std::string + ".5.");
        } else {
            whitePlayer*.hasWon = true;
            blackPlayer*.hasWon = false;
            setNextMessage("White win " + engine.whitePoint as std::string + ".5 to " + engine.blackPoint as std::string + ".");
        }
        stop:= std::chrono::high_resolution_clock::now();
        duration:= std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count();
        setNextMessage("The game lasted " + duration as std::string + " ms.");
        setNextMessage("After " + engine.goban.iterations as std::string + " iterations.");
        blackPlayer*.processEndGame();
        whitePlayer*.processEndGame();
        clear();
        printGoban(engine.goban);
    }

    public playOne:(inout this) = {
        if !hasValidPlayer() {
            return;
        }
        play<true>();
        waitInput();
        setNextMessage("Game was played.");
    }
    
    private switchPlayerColor:(inout this) = {
        blackPlayer*.color = Color::White;
        whitePlayer*.color = Color::Black;
        std::swap(blackPlayer, whitePlayer);
    }

    public trainBlack:(inout this) = {
        if !hasValidPlayer() {
            return;
        }
        blackAi:= std::dynamic_pointer_cast<Ai>(blackPlayer); // CPP2 workaround: keyword "as" not working.
        if blackAi == nullptr {
            setNextMessage("Black player should be an AI.");
            return;
        }
        i: i32 = 0;
        while true
        {
            play<false>();
            blackAi*.train();
            if i % 20 == 0 {
                isSaving = true;
                blackAi*.save();
                isSaving = false;
                switchPlayerColor();
            }
            i++;
        }
        setNextMessage("AI trained.");
    }

    public evaluate:(inout this) = {
        if !hasValidPlayer() {
            return;
        }
        numberOfGame: i16 = 100;
        numberOfGameWon: i16 = 0;
        (copy i: i32 = 0)
        while i < numberOfGame
        next i++
        {
            if i == (numberOfGame / 2) {
                switchPlayerColor();
            }
            play<false>();
            if blackPlayer*.hasWon {
                numberOfGameWon++;
            }
        }
        setNextMessage("The first player won " + numberOfGameWon as std::string +
                    "/" + numberOfGame as std::string + " games againt the 2nd player.");
    }
}

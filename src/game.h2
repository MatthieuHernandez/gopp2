#include "engine.h2"
#include "move.h2"
#include "io.h2"
#include "player.h2"

Game : type = {

    player1: std::shared_ptr<Player>; // CPP2 workaround: Not able to make unique_prtr work.
    player2: std::shared_ptr<Player>;

    operator=:(out this, p1: std::shared_ptr<Player>, p2: std::shared_ptr<Player>) = {
        player1 = (p1);
        player2 = (p2);
    }

    play: <verbose: bool>(in this) = {
        start:= std::chrono::high_resolution_clock::now();
        engine: Engine = ();
        moveNumber: i16 = 1;
        do {
            clear();
            if constexpr verbose {
                printGoban(engine.goban);
            }
            m: Move = (); // CPP2 workaround: Not able to make unique_prtr work.
            if moveNumber % 2 == 1 {
                m = player1*.getMove(engine);
            } else {
                m = player2*.getMove(engine);
            }
            if engine.isValidMove(m) {
                engine.playMove(m);
                moveNumber++;
                if constexpr verbose {
                    setNextMessage(colorName(m.stone.color) + " played " + m.name + ".");
                }
            } else {
                if constexpr verbose {
                    setNextMessage(colorName(m.stone.color) + " cannot play " + m.name + ".");
                }
            }
            if (moveNumber >= 1000) { // Only to prevent an eventual triple ko.
                break;
            }
        } while !engine.isFinish();
        engine.countScore();
        setNextMessage("The game ends after " + moveNumber as std::string + " moves.");
        if (engine.blackPoint > engine.whitePoint) {
            setNextMessage("Black win " + engine.blackPoint as std::string + " to " + engine.whitePoint as std::string + ".5.");
        }
        else {
            setNextMessage("White win " + engine.whitePoint as std::string + ".5 to " + engine.blackPoint as std::string + ".");
        }
        stop:= std::chrono::high_resolution_clock::now();
        duration:= std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count();
        setNextMessage("The game lasted " + duration as std::string + " ms.");
        setNextMessage("After " + engine.goban.iterations as std::string + " iterations.");
        clear();
        printGoban(engine.goban);
        waitInput();
    }
}
#include "goban.h2"
#include "move.h2"

iterations: i32 = 0;

Engine:<Size: i8> type = {

    public goban: Goban<Size> = ();
    public moves: std::vector<Move> = ();
    public states: std::vector<std::array<std::array<Stone, Size>, Size>> = ();

    public blackPoint: i16 = 0;
    public whitePoint: i16 = 0;

    public operator=:(out this) = {
        iterations = 0;
        state: State<Stone, Size> = ();
        states.push_back(state);
    }

    public playMove:(inout this, inout m: Move, isReplay: bool = false) = {
        if isValidMove(m) {
            if m.transformation.value > -1  {
                goban.transform(m.transformation);
                if !isReplay {
                    moves.push_back(m);
                }
                return;
            }
            if m.undoLast > 0  {
                undoLastMoves(m.undoLast);
                return;
            }
            col:= m.stone.col;
            row:= m.stone.row;
            if !m.isPass && col >= 0 && row >= 0 {
                goban.state[col][row] = m.stone;
                if m.captureStones {
                    _ = captureStones(m.stone);
                }
            }
            if goban.lockedPosition.color == m.stone.color {
                goban.unlockPosition();
            }
            if !isReplay {
                moves.push_back(m);
            }
            states.push_back(goban.state);
        }
    }

    private undoLastMoves:(inout this, n: i8) = {
        if moves.ssize() > n {
            moves.erase(moves.end() - n, moves.end());
        } else {
            moves.clear();
        }
        goban.clear();
        states.clear();
        replayGame();
    }

    private replayGame:(inout this) = {
        for moves
        do (inout m) {
            playMove(m, true);
        }
    }

    private countLiberties:(in this, in stone: Stone, inout count: i16, inout processedStones: State<bool, Size>) = {
        if count > 1 {
            return;
        }
        processedStones[stone.col][stone.row] = true;
        nextStones:= goban.getAdjacentStone(stone, processedStones);
        for nextStones
        do (in nextStone) {
            iterations++;
            if !processedStones[nextStone.col][nextStone.row] {
                if nextStone.color == ColorNone {
                    processedStones[nextStone.col][nextStone.row] = true;
                    count++;
                    if count > 1 {
                        return;
                    }
                }
            }
        }
        for nextStones
        do (in nextStone) {
            if !processedStones[nextStone.col][nextStone.row] {
                if nextStone.color == stone.color {
                    countLiberties(nextStone, count, processedStones);
                }
            }
        }
    }

    private numberOfLiberties:(in this, inout stone: Stone) -> i16 = {
        processedStones: State<bool, Size> = ();
        count: i16 = 0;
        countLiberties(stone, count, processedStones);
        processedStones = processedStones;
        return count;
    }

    private removeGroup:(inout this, inout stone: Stone, inout count: i16, inout processedStones: State<bool, Size>) = {
        nextStones:= goban.getAdjacentStone(stone, processedStones);
        for nextStones
        do (inout nextStone) {
            iterations++;
            if nextStone.color == stone.color {
                goban.removeStone(nextStone);
                processedStones[nextStone.col][nextStone.row] = true;
                count++;
                removeGroup(nextStone, count, processedStones);
            }
        }
    }

    private captureStones:(inout this, inout stone: Stone) -> i16 = {
        processedStones: State<bool, Size> = ();
        count: i16 = 0;
        color:= otherColor(stone.color);
        nextStones:= goban.getAdjacentStone(stone, processedStones);
        for nextStones
        do (inout nextStone) {
            iterations++;
            if nextStone.color == color {
                l:= numberOfLiberties(nextStone);
                if l == 0 {
                    removeGroup(nextStone, count, processedStones);
                    goban.removeStone(nextStone);
                    count++;
                    if count == 1 {
                        goban.lockPosition(nextStone, color);
                    }
                }
            }
        }
        return count;
    }

    private canCaptureStones:(in this, inout stone: Stone) -> bool = {
        processedStones: State<bool, Size> = ();
        color:= otherColor(stone.color);
        nextStones:= goban.getAdjacentStone(stone, processedStones);
        for nextStones
        do (inout nextStone) {
            iterations++;
            if nextStone.color == color {
                l:= numberOfLiberties(nextStone);
                if l == 1 {
                    return true;
                }
            }
        }
        return false;
    }

    public isValidMove:(in this, inout m: Move) -> bool = {
        if m.isValid || m.isPass || m.undoLast > 0 || m.transformation > -1 {
            m.isValid = true;
            return true;
        }
        col:= m.stone.col;
        row:= m.stone.row;
        if goban.state[col][row].color == ColorNone && !goban.isTrueEye(m.stone) {
            if !goban.isLockedPosition(m.stone) {
                if canCaptureStones(m.stone) {
                    m.isValid = true;
                    m.captureStones = true;
                    return true;
                }
                if numberOfLiberties(m.stone) > 0 {
                   m.isValid = true;
                   return true;
                }
            }
        }
        m.isValid = false;
        return false;
    }

    public isFinish:(this) -> bool = {
        if moves.ssize() > 1 {
            if (moves[moves.ssize() - 1].isPass == true
             && moves[moves.ssize() - 2].isPass == true)
             || goban.getStoneDifference() >= 2 * Size {
                return true;
            }
        }
        maximumMoves: const i16 = Size * Size * 3; // Only to prevent an eventual triple ko.
        if moves.ssize() > maximumMoves {
            return true;
        }
        return false;
    }

    private countTerritory:(inout this, in stone: Stone, inout count: i16, inout color: Color,
        inout processedStones1: State<bool, Size>, inout processedStones2: State<bool, Size>) = {
        if count == 0 {
            return;
        }
        processedStones2[stone.col][stone.row] = true;
        nextStones:= goban.getAdjacentStone(stone, processedStones2);
        for nextStones
        do (inout nextStone) {
            iterations++;
            if nextStone.color == ColorNone {
                if !processedStones2[nextStone.col][nextStone.row] {
                    processedStones1[nextStone.col][nextStone.row] = true;
                    count++;
                    countTerritory(nextStone, count, color, processedStones1, processedStones2);
                }
            }
            else if nextStone.color == ColorBlack && color != ColorWhite {
                color = ColorBlack;
            }
            else if nextStone.color == ColorWhite && color != ColorBlack {
                color = ColorWhite;
            } else{
                count = 0;
                return;
            }
            processedStones2[nextStone.col][nextStone.row] = true;
        }
    }

    public countScore:(inout this) = {
        processedStones1: State<bool, Size> = ();
        blackPoint = 0;
        whitePoint = 7; // The komi is 7.5.
        (copy col: i8 = 0)
        while col < goban.state.ssize()
        next col++
        {
            (copy row: i8 = 0)
            while row < goban.state[col].ssize()
            next row++
            {
                if !processedStones1[col][row] {
                    processedStones1[col][row] = true;
                    if goban.state[col][row].color == ColorBlack {
                        blackPoint++;
                    }
                    else if goban.state[col][row].color == ColorWhite {
                        whitePoint++;
                    }
                    else {
                        count: i16 = 1;
                        color:= ColorNone;
                        processedStones2: State<bool, Size> = ();
                        countTerritory(goban.state[col][row], count, color, processedStones1, processedStones2);
                        assert(processedStones2&);  // CPP2 workaround: Fix inout recursion.
                        if color == ColorBlack {
                            blackPoint+= count;
                        }
                        if color == ColorWhite {
                            whitePoint+= count;
                        }
                    }
                }
            }
        }
    }

    private findValidMove:(inout this, inout m: Move, inout processedStones: State<bool, Size>, inout count: i32) = {
        processedStones[m.stone.col][m.stone.row] = true;
        count++;
        if isValidMove(m) {
            return;
        }
        nextStones:= goban.getAdjacentStone(m.stone, processedStones);
        for nextStones
        do (in nextStone) {
            iterations++;
            if !m.isValid {
                m.stone.col = nextStone.col;
                m.stone.row = nextStone.row;
                if !processedStones[m.stone.col][m.stone.row] {
                    findValidMove(m, processedStones, count);
                }
            }
        }
    }

    public closerValidMove:(inout this, inout m: Move) = {
        if m.isPass {
            return;
        }
        processedStones: State<bool, Size> = (false);
        count: i32 = 0;
        findValidMove(m, processedStones, count);
        assert(processedStones&);  // CPP2 workaround: Fix inout recursion.
        assert(count&);  // CPP2 workaround: Fix inout recursion.
        if !m.isValid {
            m = Move::pass(m.stone.color);
        }
    }
}

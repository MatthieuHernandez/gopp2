#include "player.h2"
#include "snn.h2"

createAi:() = {
    layers: std::vector<snn::LayerModel> = (snn::Input(1, 9, 9),
                                            snn::Convolution(16, 3, snn::activation::ReLU),
                                            snn::Convolution(32, 3, snn::activation::ReLU),
                                            snn::Convolution(64, 3, snn::activation::ReLU),
                                            snn::Convolution(128, 3, snn::activation::ReLU),
                                            snn::FullyConnected(81, snn::activation::tanh));
    /*layers: std::vector<snn::LayerModel> = (snn::Input(1, 9, 9),
                                            snn::FullyConnected(1000, snn::activation::ReLU),
                                            snn::FullyConnected(81, snn::activation::tanh));*/
    optimizer:= snn::StochasticGradientDescent(1e-4f, 0.0f);
    neuralNetwork:= snn::StraightforwardNeuralNetwork(layers, optimizer);
    neuralNetwork.saveAs("./snn_models/9x9/model_02.snn");
    if neuralNetwork.isValid() != snn::errorType::noError {
        std::cout << "INVALID MODEL !" << std::endl;
        std::exit(0);
    }
    std::cout << "AI created." << std::endl;
}

Ai: type = {
    this: Player;
    public topK: i16; // Randomly select a move from the K best moves.

    private modelPath: std::string;
    private neuralNetwork: std::shared_ptr<snn::StraightforwardNeuralNetwork>;
    private optimizer: std::shared_ptr<snn::internal::StochasticGradientDescent>;
    private lastGameWon: std::deque<int>;
    private numberOfGames: const size_t = 1000; // To calculate winrate.
    private sumOfLastGameWon: size_t = 0;
    private defaultLearningRate: float = 1e-4f;
    private previousWinrate: float = 0.0f;
    private isBetter: bool = false;

    public operator=:(out this, i: *Interface, c: Color, r: i16, path: std::string) = {
        Player = (i, c);
        topK = r;
        modelPath = path;
        neuralNetwork = shared.new<snn::StraightforwardNeuralNetwork>(snn::StraightforwardNeuralNetwork::loadFrom(modelPath));
        optimizer = std::static_pointer_cast<snn::internal::StochasticGradientDescent>(neuralNetwork*.optimizer);
        lastGameWon = ();
    }

    public operator=:(out this, i: *Interface, c: Color, r: i16, in ai: Ai) = {
        Player = (i, c);
        topK = r;
        modelPath = "";
        neuralNetwork = ai.neuralNetwork;
        optimizer = std::static_pointer_cast<snn::internal::StochasticGradientDescent>(neuralNetwork*.optimizer);
        lastGameWon = ();
    }

    public operator=:(out this, that) = {
        Player = (that);
        topK = that.topK;
        neuralNetwork = that.neuralNetwork;
        optimizer = that.optimizer;
        modelPath = that.modelPath;
        lastGameWon = that.lastGameWon;
        sumOfLastGameWon = that.sumOfLastGameWon;
        defaultLearningRate = that.defaultLearningRate;
        previousWinrate = that.previousWinrate;
        isBetter = that.isBetter;
    }

    public summary:(in this) -> std::string = {
        return neuralNetwork*.summary();
    }

    private getGobanState:<Size: i8>(in this, in state: State<Stone, Size>) -> std::vector<float> = {
        vec: std::vector<float> = ();
        size:= state.ssize() * state.ssize();
        vec.reserve(size);
        (copy col: i8 = 0)
        while col < state.ssize()
        next col++
        {
            (copy row: i8 = 0)
            while row < state[col].ssize()
            next row++
            {
                if state[col][row].color == color {
                    vec.push_back(1.0);
                }
                else if state[col][row].color == ColorNone {
                    vec.push_back(0.0);
                }
                else {
                    vec.push_back(-1.0);
                }
            }
        }
        return vec;
    }

    private chooseBestMove:<Size: i8>(inout this, in nnOutput: std::vector<float>, inout engine: Engine<Size>) -> Move = {
        index: i16 = 0;
        estimatedPositions: std::vector<Stone> = ();
        numberOfPositions:= Size * Size;
        estimatedPositions.reserve(numberOfPositions);
        (copy col: i8 = 0)
        while col < Size
        next col++
        {
            (copy row: i8 = 0)
            while row < Size
            next row++
            {
                estimation:= nnOutput[index];
                stone:=  Stone(color, col, row, estimation);
                estimatedPositions.push_back(stone);
                index++;
            }
        }
        std::ranges::sort(estimatedPositions, std::ranges::greater(), Stone::estimation&);
        dist: std::uniform_int_distribution<i64> = (0, topK-1);
        pickedIndex:= dist(rng);
        s:= estimatedPositions[pickedIndex];
        m:= Move(s);
        if engine.isValidMove(m) {
            return m;
        }
        (copy index2: i16 = 0)
        while index2 < numberOfPositions
        next index2++
        {
            if (index2 != pickedIndex) {
                s2:= estimatedPositions[index2];
                m2:= Move(s2);
                if engine.isValidMove(m2) {
                    return m2;
                }
            }
        }
        return Move::pass(color);
    }

    private getMove:<Size: i8>(inout this, inout engine: Engine<Size>) -> Move = {

        input:= getGobanState<Size>(engine.goban.state);
        output:= neuralNetwork*.computeOutput(input);
        m:= chooseBestMove<Size>(output, engine);
        return m;
    }

    public getMove:(override inout this, inout engine: Engine<9>) -> Move = {
        return getMove<9>(engine);
    }

    public getMove:(override inout this, inout engine: Engine<13>) -> Move = {
        return getMove<13>(engine);
    }

    public getMove:(override inout this, inout engine: Engine<19>) -> Move = {
        return getMove<19>(engine);
    }

    private computeLearningRate:(inout this, gameLength: i16)-> float = {
        learningRate:= defaultLearningRate;
        if calculateWinrate() > 0.8 {
            learningRate /= 2;
        }
        return learningRate;
    }

    public train:<Size: i8>(inout this, in engine: Engine<Size>) = {
        if (engine.moves.ssize() > 291) {
            return;
        }
        gameLength: i16 = unchecked_narrow<i16>(engine.moves.size());
        optimizer*.learningRate = computeLearningRate(gameLength);
        size:= Size * Size;
        expectedBlack: float;
        expectedWhite: float;
        if (hasWon && color == ColorBlack) ||
           (!hasWon && color == ColorWhite) {  // CPP2 workaround: Conditional operator not yet supported.
            expectedBlack = 1.0f;
            expectedWhite = -1.0f;
        } else {
            expectedBlack = -1.0f;
            expectedWhite = 1.0f;
        }
        (copy i: i16 = 0)
        while i < (engine.moves.ssize())
        next i++
        {
            if (engine.moves[i].isPass == true) {
                return;
            }
            inputs:= getGobanState<Size>(engine.states[i]);
            expectedOutputs:= std::vector<float>(size, NAN);
            weighting:= std::vector<float>(size, 1.0f);
            (copy j: i16 = 0)
            while j < size
            next j++
            {
                if inputs[j] != 0.0 {
                    expectedOutputs[j] = 0;
                    weighting[j] = 1e-3f;
                }
            }
            expectedIndex:= engine.moves[i].stone.getIndex<Size>();
            if i % 2 == 0 {
                expectedOutputs[expectedIndex] = expectedBlack;
            } else {
                expectedOutputs[expectedIndex] = expectedWhite;
            }
            neuralNetwork*.trainOnce(inputs, expectedOutputs, weighting);
        }
    }

    public save:(inout this, onlyIfBetter: bool) = {
        if !onlyIfBetter || isBetter {
            neuralNetwork*.saveAs(modelPath);
            isBetter = false;
        }
    }

    private calculateWinrate:(in this) -> float = {
        return sumOfLastGameWon / (float)(lastGameWon.size());
    }

    public processStartGame:(override inout this) = {
        if neuralNetwork*.isValid() != snn::errorType::noError {
            std::cout << "INVALID MODEL !" << std::endl;
            std::exit(0);
        }
        currentWinRate:= calculateWinrate();
        if lastGameWon.ssize() == numberOfGames
        && currentWinRate > previousWinrate {
            previousWinrate = currentWinRate;
            isBetter = true;

        }
    }

    public processEndGame:(override inout this) = {
        if hasWon {  // CPP2 workaround: Conditional operator not yet supported.
            lastGameWon.push_back(1);
            sumOfLastGameWon += 1;
        } else {
            lastGameWon.push_back(0);
        }
        if (lastGameWon.size() > numberOfGames) {
            sumOfLastGameWon -= lastGameWon.front();
            lastGameWon.pop_front();
        }
        if lastGameWon.ssize() > 100 {
            interface*.printLater("AI winrate: "+ std::to_string(calculateWinrate() * 100.0f) +" %");
        } else {
            interface*.print("AI winrate: ...");
        }
        oss: std::ostringstream = ();
        oss << "AI learning rate: " << std::scientific << std::setprecision(2) << optimizer*.learningRate;
        interface*.printLater(oss.str());
        interface*.printLater("AI Top-k: " + std::to_string(topK));
    }
}

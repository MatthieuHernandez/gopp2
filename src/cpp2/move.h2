#include "stone.h2"
#include "transformation.h2"


Move: type = {
    public stone: Stone;
    public isPass: bool;
    public undoLast: i8;
    public transformation: Transformation = (-1);
    public isValid: bool;
    public captureStones: bool;
    public lockedPosition: Stone = ();

    public operator=:(out this) = {
        stone = ();
        isPass = false;
        undoLast = 0;
        isValid = false;
        captureStones = false;
    }

    public operator=:(out this, color: Color, col: i8, row: i8, u: i8 = 0, pas: bool = false, t: Transformation = -1) = {
        stone = (color, col, row);
        isPass = pas;
        undoLast = u;
        isValid = false;
        captureStones = false;
        transformation = t;
    }

    public operator=:(out this, in s: Stone) = {
        stone = s;
        isPass = false;
        undoLast = 0;
        isValid = false;
        captureStones = false;
        transformation = -1;
    }

    public name:(in this) -> std::string = {
        if isPass {
            return "pass";
        }
        if undoLast {
            return "undo";
        }
        if transformation > -1 {
            return "transform";
        }
        colName: char = stone.col;
        colName +=  65;
        if stone.col > 7 { // No I column
            colName++;
        }
        n:= colName + (stone.row + 1) as std::string;
        return n;

    }

    public operator=:(out this, that) = {
        stone = that.stone;
        isPass = that.isPass;
        undoLast = that.undoLast;
        isValid = that.isValid;
        captureStones = that.captureStones;
        transformation = that.transformation;
    }

    public pass:(color: Color) -> Move = {
        return Move(color, -1, -1, 0, true, -1);
    }

    public undo:(n: i8) -> Move = {
        return Move(ColorNone, -1, -1, n, false, -1);
    }

    public applyTransformation:(t: Transformation) -> Move = {
        return Move(ColorNone, -1, -1, 0, false, t);
    }
}

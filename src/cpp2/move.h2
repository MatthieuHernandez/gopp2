#include "stone.h2"

pass:(color: Color) -> Move = {
    return Move(color, -1, -1, true);
}

Move: type = {
    public stone: Stone;
    public isPass: bool;
    public isValid: bool;

    public operator=:(out this) = {
        stone = ();
        isPass = false;
        isValid = false;
    }

    public operator=:(out this, color: Color, col: i8, row: i8, pas: bool = false) = {
        stone = (color, col, row);
        isPass = pas;
        isValid = false;
    }

    public operator=:(out this, in s: Stone) = {
        stone = s;
        isPass = false;
        isValid = false;
    }

    public name:(in this) -> std::string = {
        if !isPass {
            colName: char = stone.col;
            colName +=  65;
            if stone.col > 7 { // No I column
                colName++;
            }
            n:= colName + (stone.row + 1) as std::string;
            return n;
        }
        return "pass";
    }

    public operator=:(out this, that) = {
        stone = that.stone;
        isPass = that.isPass;
        isValid = that.isValid;
    }
}

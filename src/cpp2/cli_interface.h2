#include "cli.h2"
#include "interface.h2"
#include "io.h2"

CliInterface: type = {
    this: Interface;

    public print:(override inout this, in message: std::string) = {
        std::cout << message << std::endl;
    }

    public printLater:(override inout this, in message: std::string) = {
        cli::setNextMessage(message);
    }

    public softClear:(override inout this) = {
        cli::clearConsole();
    }

    public hardClear:(override inout this) = {
    }

    public refreshGoban:(override inout this, in engine: std::shared_ptr<Engine<9>>, force: bool) = {
        cli::printGoban<9>(engine*.goban);
    }

    public refreshGoban:(override inout this, in engine: std::shared_ptr<Engine<13>>, force: bool) = {
        cli::printGoban<13>(engine*.goban);
    }

    public refreshGoban:(override inout this, in engine: std::shared_ptr<Engine<19>>, force: bool) = {
        cli::printGoban<19>(engine*.goban);
    }

    public wait:(override inout this) = {
        cli::waitInput();
    }

    public waitMove:(override inout this, in c: Color) -> Move = {
        return cli::getInputMove<9>(c);
    }

    public colorTurn:(override inout this) -> Color = {
        return ColorNone;  // Method not used.
    }


    public stopGame:(override inout this, in stop: bool) = {}

    public stopRequested:(override inout this) -> bool = {
        return false;
    }
}
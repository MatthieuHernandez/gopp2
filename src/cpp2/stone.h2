#include "color.h2"
#include "transformation.h2"

Stone: type = {
    public color: Color;
    public col: i8;
    public row: i8;
    public estimation: float;

    public operator=:(implicit out this) = {
        color = ColorNone;
        col = -1;
        row = -1;
        estimation = 0.0f;
    }

    public operator=:(out this, p: Color, c: i8, r: i8, e: float = 0.0f) = {
        color = p;
        col = c;
        row = r;
        estimation = e;
    }

    public operator=:(out this, that) = {
        color = that.color;
        col = that.col;
        row = that.row;
    }

    public getIndex:<Size: i8>(in this) -> i16 = {
        return (col as i16) * (Size) + (row as i16);
    }

    public operator<=>: (this, that) -> std::strong_ordering;

    public rotate90:<Size: i8>(inout this) = {
        new_col := row;
        new_row := Size - 1 - col;
        col = new_col;
        row = new_row;
    }

    private rotate180:<Size: i8>(inout this) = {
        new_col := Size - 1 - col;
        new_row := Size - 1 - row;
        col = new_col;
        row = new_row;
    }

    private rotate270:<Size: i8>(inout this) = {
        new_col := Size - 1 - row;
        new_row := col;
        col = new_col;
        row = new_row;
    }

    private flipHorizontal:<Size: i8>(inout this) = {
        new_col := Size - 1 - col;
        new_row := row;
        col = new_col;
        row = new_row;
    }

    private flipVertical:<Size: i8>(inout this) = {
        new_col := col;
        new_row := Size - 1 - row;
        col = new_col;
        row = new_row;
    }

    public transform:<Size: i8>(inout this, in t1: Transformation) = {
        if col < 0 || row < 0 {
            return;
        }
        if t1 == Rotate90 {
            rotate90<Size>();
        } else if t1 == Rotate180 {
            rotate180<Size>();
        }else if t1 == Rotate270 {
            rotate270<Size>();
        }else if t1 == FlipHorizontal {
            flipHorizontal<Size>();
        }else if t1 == FlipVertical {
            flipVertical<Size>();
        }
    }
}
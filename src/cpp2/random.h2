#include "player.h2"

Random: type = {
    this: Player;

    public operator=:(out this,  i: *Interface, c: Color) = {
        Player = (i, c);
    }

    public operator=:(out this, that) = {
        Player = (that);
    }

    private getMove:<Size: i8>(inout this, inout engine: Engine<Size>) -> Move = {
        maxIndex: i8 = Size - 1;
        dist: std::uniform_int_distribution<i32> = (0, maxIndex);
        col: i32 = dist(rng);
        row: i32 = dist(rng);
        m:= Move(color, col, row);
        engine.closerValidMove(m);
        return m;
    }

    public getMove:(override inout this, inout engine: Engine<9>) -> Move = {
        return getMove<9>(engine);
    }

    public getMove:(override inout this, inout engine: Engine<13>) -> Move = {
        return getMove<13>(engine);
    }

    public getMove:(override inout this, inout engine: Engine<19>) -> Move = {
        return getMove<19>(engine);
    }
}

#include "engine.h2"
#include "move.h2"
#include "player.h2"
#include "human.h2"
#include "dumb.h2"
#include "random.h2"
#include "ai.h2"
#include "itself.h2"

Game: type = {
    private isSaving: bool = false;
    private interface: *Interface;
    private gobanSize: i8 = 9;

    public saveOnlyIfBetter: bool = false;
    public blackPlayer: std::shared_ptr<Player> = nullptr; // CPP2 workaround: Not able to make unique_ptr work.
    public whitePlayer: std::shared_ptr<Player> = nullptr;

    public playAtariGo: bool = false;

    public operator=:(out this, i: *Interface) = {
        interface = i;
    }

    public canBeStopped:(in this) -> bool = {
        return !isSaving;
    }

    public getGobanSize:(in this) -> i8 = {
        return gobanSize;
    }

    public setGobanSize:(inout this, size: i8) = {
        gobanSize = size;
    }

    private getPlayerName:(player: std::shared_ptr<Player>) -> std::string = {
        human:= std::dynamic_pointer_cast<Human>(player); // CPP2 workaround: keyword "as" not working.
        if human != nullptr {
            return "Human";
        }
        dumb:= std::dynamic_pointer_cast<Dumb>(player);
        if dumb != nullptr {
            return "Dumb";
        }
        random:= std::dynamic_pointer_cast<Random>(player);
        if random != nullptr {
            return "Random";
        }
        ai:= std::dynamic_pointer_cast<Ai>(player);
        if ai != nullptr {
            return "AI";
        }
        itself:= std::dynamic_pointer_cast<Itself>(player);
        if itself != nullptr {
            return "Itself";
        }
        return "None";
    }

    public getPlayerNames:(in this) -> std::string = {
        p1:= getPlayerName(blackPlayer);
        p2:= getPlayerName(whitePlayer);
        return p1 +" vs " + p2;
    }

    public selectPlayer:(inout this, color: Color, selection: std::string) = {
        player: std::shared_ptr<Player> = nullptr;
        if (selection == "" || color == ColorNone) {
            player = nullptr;
        } else if (selection == "-1" && color == ColorBlack) {
            player = nullptr;
        } else if (selection == "-1" && color == ColorWhite) {
            ai:= std::dynamic_pointer_cast<Ai>(blackPlayer);
            player = shared.new<Itself>(interface, color, ai*);
        } else if (selection == "0") {
            player = shared.new<Human>(interface, color);
        } else if (selection == "1") {
            player = shared.new<Dumb>(interface, color);
        } else if (selection == "2") {
            player = shared.new<Random>(interface, color);
        } else {
            ai:= shared.new<Ai>(interface, color, selection);
            interface*.softClear();
            interface*.print(ai*.summary());
            interface*.wait();
            player = ai;
        }
        if (color == ColorBlack) {
            blackPlayer = player;
        } else if (color == ColorWhite) {
            whitePlayer = player;
        }
    }

    private hasValidPlayer:(in this) -> bool = {
        if blackPlayer == nullptr || whitePlayer == nullptr {
            interface*.printLater("No player selected.");
            return false;
        }
        return true;
    }

    private setAiTopK:(inout this, r: i16) = {
        ai1:= std::dynamic_pointer_cast<Ai>(blackPlayer);  // CPP2 workaround: keyword "as" not working.
        if ai1 != nullptr {
            ai1*.topK = r;
        }
        ai2:= std::dynamic_pointer_cast<Ai>(whitePlayer);  // CPP2 workaround: keyword "as" not working.
        if ai2 != nullptr {
            ai2*.topK = r;
        }
    }

    private play:<verbose: bool, Size: i8>(inout this, engine: std::shared_ptr<Engine<Size>>, forceRefresh: bool) = {
        start:= std::chrono::steady_clock::now();
        interface*.stopGame(false);
        interface*.hardClear();
        blackPlayer*.processStartGame();
        whitePlayer*.processStartGame();
        moveNumber: i16 = 1;
        do {
            if constexpr verbose {
                interface*.softClear();
                interface*.refreshGoban(engine, false);
            }
            m: Move = (); // CPP2 workaround: Not able to make unique_ptr work.
            if moveNumber % 2 == 1 {
                m = blackPlayer*.getMove(engine*);
            } else {
                m = whitePlayer*.getMove(engine*);
            }
            if engine*.isValidMove(m) {
                engine*.playMove(m);
                if m.transformation == -1 {
                    if m.undoLast == 0 {
                        moveNumber++;
                    } else if m.undoLast < moveNumber {
                        moveNumber -= m.undoLast;
                    } else {
                        moveNumber = 1;
                    }
                }
                if constexpr verbose {
                    interface*.printLater(colorName(m.stone.color) + " played " + m.name() + ".");
                }
            } else {
                if constexpr verbose {
                    interface*.printLater(colorName(m.stone.color) + " cannot play " + m.name() + ".");
                }
            }
        } while !engine*.isFinish() && !interface*.stopRequested();
        engine*.countScore();
        interface*.printLater("The game ends after " + moveNumber as std::string + " moves.");
        if (engine*.blackPoint > engine*.whitePoint) {
            blackPlayer*.hasWon = true;
            whitePlayer*.hasWon = false;
            interface*.printLater("Black win " + engine*.blackPoint as std::string + " to " + engine*.whitePoint as std::string + ".5.");
        } else {
            whitePlayer*.hasWon = true;
            blackPlayer*.hasWon = false;
            interface*.printLater("White win " + engine*.whitePoint as std::string + ".5 to " + engine*.blackPoint as std::string + ".");
        }
        end:= std::chrono::steady_clock::now();
        duration:= std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();
        interface*.printLater("The game lasted " + duration as std::string + " ms.");
        interface*.printLater("After " + iterations as std::string + " iterations.");
        blackPlayer*.processEndGame();
        whitePlayer*.processEndGame();
        interface*.softClear();
        interface*.refreshGoban(engine, forceRefresh);
    }

    public playOne:(inout this) = {
        if !hasValidPlayer() {
            return;
        }
        if gobanSize == 9 {
            e:= shared.new<Engine<9>>();
            e*.useAtariGoRules = playAtariGo;
            play<true, 9>(e, true);
        } else if gobanSize == 13 {
            e:= shared.new<Engine<13>>();
            e*.useAtariGoRules = playAtariGo;
            play<true, 13>(e, true);
        } else if gobanSize == 19 {
            e:= shared.new<Engine<19>>();
            e*.useAtariGoRules = playAtariGo;
            play<true, 19>(e, true);
        } else {
            return;
        }
        interface*.wait();
    }
    
    private switchPlayerColor:(inout this) = {
        blackPlayer*.setColor(ColorWhite);
        whitePlayer*.setColor(ColorBlack);
        std::swap(blackPlayer, whitePlayer);
    }

    public trainBlack:(inout this) = {
        if !hasValidPlayer() {
            return;
        }
        player1:= std::dynamic_pointer_cast<Ai>(blackPlayer); // CPP2 workaround: keyword "as" not working.
        if player1 == nullptr {
            interface*.printLater("Black player should be an AI.");
            return;
        }
        i: i32 = 0;
        do {
            if gobanSize == 9 {
                e:= shared.new<Engine<9>>();
                e*.useAtariGoRules = playAtariGo;
                play<false, 9>(e, true);
                player1*.train<9>(e*);
            } else if gobanSize == 13 {
                e:= shared.new<Engine<13>>();
                e*.useAtariGoRules = playAtariGo;
                play<false, 13>(e, true);
                player1*.train<13>(e*);
            } else if gobanSize == 19 {
                e:= shared.new<Engine<19>>();
                e*.useAtariGoRules = playAtariGo;
                play<false, 19>(e, true);
                player1*.train<19>(e*);
            } else{
                return;
            }
            switchPlayerColor();
            if i % 100 == 99 {
                isSaving = true;
                player1*.save(saveOnlyIfBetter);
                isSaving = false;
            }
            i++;
        } while !interface*.stopRequested();
        if i%2 == 1 {
            switchPlayerColor();
        }
        interface*.printLater("AI trained.");
    }

    public evaluate:(inout this) = {
        start:= std::chrono::steady_clock::now();
        if !hasValidPlayer() {
            return;
        }
        blackHuman:= std::dynamic_pointer_cast<Human>(blackPlayer); // CPP2 workaround: keyword "as" not working.
        whiteHuman:= std::dynamic_pointer_cast<Human>(blackPlayer);
        if blackHuman != nullptr || whiteHuman != nullptr {
            interface*.printLater("Cannot evaluated with human players.");
            return;
        }
        player1:= blackPlayer;
        numberOfGame: i16 = 1000;
        numberOfGameWon: i16 = 0;
        interface*.hardClear();
        i: i32 = 0;
        while i < numberOfGame
        next i++
        {
            forceRefresh := i%10 == 0;
            if gobanSize == 9 {
                e:= shared.new<Engine<9>>();
                e*.useAtariGoRules = playAtariGo;
                play<false, 9>(e, forceRefresh);
            }
            else if gobanSize == 13 {
                e:= shared.new<Engine<13>>();
                e*.useAtariGoRules = playAtariGo;
                play<false, 13>(e, forceRefresh);
            }
            else if gobanSize == 19 {
                e:= shared.new<Engine<19>>();
                e*.useAtariGoRules = playAtariGo;
                play<false, 19>(e, forceRefresh);
            } else {
                return;
            }
            if player1*.hasWon {
                numberOfGameWon++;
            }
            if interface*.stopRequested() {
                break;
            }
            switchPlayerColor();
        }
        if i%2 == 1 {
            switchPlayerColor();
        }
        interface*.printLater("The first player won " + numberOfGameWon as std::string +
                    "/" + numberOfGame as std::string + " games againt the 2nd player.");
        end:= std::chrono::steady_clock::now();
        duration:= std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();
        interface*.printLater("The evaluation lasted " + duration as std::string + " ms.");
    }
}

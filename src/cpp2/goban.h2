#include "stone.h2"
#include "transformation.h2"

State: <T: type, Size: i8> type == std::array<std::array<T, Size>, Size>;

rotate90:<Size: i8>(in state: State<Stone, Size>) -> State<Stone, Size> = {
    maxIndex: i8 = Size - 1;
    newState: State<Stone, Size> = state;
    (copy col: i8 = 0)
    while col < Size
    next col++
    {
        (copy row: i8 = 0)
        while row < Size
        next row++
        {
            newState[col][maxIndex - row].color = state[row][col].color;
            newState[col][maxIndex - row].estimation = state[row][col].estimation;
        }
    }
    return newState;
}

rotate180:<Size: i8>(in state: State<Stone, Size>) -> State<Stone, Size> = {
    maxIndex: i8 = Size - 1;
    newState: State<Stone, Size> = state;
    (copy col: i8 = 0)
    while col < Size
    next col++
    {
        (copy row: i8 = 0)
        while row < Size
        next row++
        {
            newState[maxIndex - col][maxIndex - row].color = state[col][row].color;
            newState[maxIndex - col][maxIndex - row].estimation = state[col][row].estimation;
        }
    }
    return newState;
}

rotate270:<Size: i8>(in state: State<Stone, Size>) -> State<Stone, Size> = {
    maxIndex: i8 = Size - 1;
    newState: State<Stone, Size> = state;
    (copy col: i8 = 0)
    while col < Size
    next col++
    {
        (copy row: i8 = 0)
        while row < Size
        next row++
        {
            newState[maxIndex - col][row].color = state[row][col].color;
            newState[maxIndex - col][row].estimation = state[row][col].estimation;
        }
    }
    return newState;
}

flipHorizontal:<Size: i8>(in state: State<Stone, Size>) -> State<Stone, Size> = {
    maxIndex: i8 = Size - 1;
    newState: State<Stone, Size> = state;
    (copy col: i8 = 0)
    while col < Size
    next col++
    {
        (copy row: i8 = 0)
        while row < Size
        next row++
        {
            newState[col][row].color = state[maxIndex - col][row].color;
            newState[col][row].estimation = state[maxIndex - col][row].estimation;
        }
    }
    return newState;
}

flipVertical:<Size: i8>(in state: State<Stone, Size>) -> State<Stone, Size> = {
    maxIndex: i8 = Size - 1;
    newState: State<Stone, Size> = state;
    (copy col: i8 = 0)
    while col < Size
    next col++
    {
        (copy row: i8 = 0)
        while row < Size
        next row++
        {
            newState[col][row].color = state[col][maxIndex - row].color;
            newState[col][row].estimation = state[col][maxIndex - row].estimation;
        }
    }
    return newState;
}

transform:<Size: i8>(in state, in t1: Transformation) -> State<Stone, Size> = {
    if t1 == Rotate90 {
        return rotate90<Size>(state);
    } else if t1 == Rotate180 {
        return rotate180<Size>(state);
    }else if t1 == Rotate270 {
        return rotate270<Size>(state);
    }else if t1 == FlipHorizontal {
        return flipHorizontal<Size>(state);
    }else if t1 == FlipVertical {
        return flipVertical<Size>(state);
    }
    return state;
}

Goban:<Size: i8> type = {
    public state: State<Stone, Size> = ();
    public lockedPosition: Stone = ();
    private maxIndex: i8 = Size - 1;

    operator=:(out this) = {
        clear();
    }

    public clear:(inout this) = {
        (copy col: i8 = 0)
        while col < state.ssize()
        next col++
        {
            (copy row: i8 = 0)
            while row < state[col].ssize()
            next row++
            {
                state[col][row] = Stone(ColorNone, col, row);
            }
        }
        lockedPosition = ();
    }

    public getAdjacentStone:(in this, in s: Stone, in processedStones: State<bool, Size>, count: bool = true) -> std::vector<Stone>  = {
        adjacentStones: std::vector<Stone> = ();
        if s.col > 0 && !processedStones[s.col-1][s.row] {
            adjacentStones.push_back(state[s.col-1][s.row]);
        }
        if s.col < maxIndex && !processedStones[s.col+1][s.row] {
            adjacentStones.push_back(state[s.col+1][s.row]);
        }
        if s.row > 0 && !processedStones[s.col][s.row-1] {
            adjacentStones.push_back(state[s.col][s.row-1]);
        }
        if s.row < maxIndex && !processedStones[s.col][s.row+1] {
                adjacentStones.push_back(state[s.col][s.row+1]);
        }
        return adjacentStones;
    }

    public isTrueEye:(in this, in s: Stone) -> bool = {
        if (s.col > 0 && state[s.col-1][s.row].color != s.color) ||
            (s.col < maxIndex && state[s.col+1][s.row].color != s.color) ||
            (s.row > 0 && state[s.col][s.row-1].color != s.color) ||
            (s.row < maxIndex && state[s.col][s.row+1].color != s.color) {
                return false;
        }
        count: i8 = 0;
        if s.col > 0 && s.row > 0 {
            if state[s.col-1][s.row-1].color == s.color {
                count++;
            }
        }
        if s.col > 0  && s.row < maxIndex {
            if state[s.col-1][s.row+1].color == s.color {
                count++;
            }
        }
        if s.col < maxIndex && s.row > 0 {
            if state[s.col+1][s.row-1].color == s.color {
                count++;
            }
        }
        if s.col < maxIndex  && s.row < maxIndex {
            if state[s.col+1][s.row+1].color == s.color {
                count++;
            }
        }
        return count >= 3;
    }

    public removeStone:(inout this, in s: Stone) = {
        state[s.col][s.row].color = ColorNone;
    }

    public isLockedPosition:(in this, in s: Stone) -> bool = {
        return lockedPosition.col == s.col &&
            lockedPosition.row == s.row;
    }

    public lockPosition:(inout this, in s: Stone, c: Color) = {
        lockedPosition = s;
        lockedPosition.color = c;
    }

    public unlockPosition:(inout this) = {
        lockedPosition.color = ColorNone;
        lockedPosition.row = -1;
        lockedPosition.col = -1;
    }

    public transform:(inout this, in t1: Transformation) = {
        state = transform<Size>(state, t1);
        lockedPosition.transform<Size>(t1);
    }
}

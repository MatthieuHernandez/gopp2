
#define QT_NO_KEYWORDS
#include <QApplication>
#include "window.h"
#include "game.h2"
#include "gui_interface.h2"
#include "cli_interface.h2"
#include "cli.h2"
#include "interface.h2"

#ifdef _WIN32
#include "windows.h"
#endif

constexpr bool win32 =
#ifdef _WIN32
    true;
#else
    false;
#endif


void windowsConfig() {
    #ifdef _WIN32
    SetConsoleOutputCP(CP_UTF8);
    #endif
}

static std::unique_ptr<Game> game = nullptr;

void signalHandler(int signal) {
    if (signal == SIGINT) {
        while(game != nullptr && !game->canBeStopped()) {
            std::cout << "Cannot stop, saving in progress..." << std::endl;
            using namespace std::literals::chrono_literals;
            std::this_thread::sleep_for(10ms);
        }
        std::exit(0);
    }
}

cliApp:() -> int = {
    windowsConfig();
    exit: bool = false;
    cliInterface:= CliInterface();
    game:= unique.new<Game>(cliInterface&);
    signal(SIGINT, signalHandler);
    do {
        size:= game*.getGobanSize();
        atariGo := game*.playAtariGo;
        players:= game*.getPlayerNames();
        selection:= cli::printMenuAndSelect(size, atariGo, players);
        if selection == 0 {
            cliInterface.softClear();
            cliInterface.print("Bye.");
            exit = true;
        } else if selection == 1 {
        if (game*.getGobanSize() == 9) {
            game*.setGobanSize(13);
        } else if (game*.getGobanSize() == 13) {
            game*.setGobanSize(19);
        } else if (game*.getGobanSize() == 19) {
            game*.setGobanSize(9);
            game*.playAtariGo = !game*.playAtariGo;
        }
        } else if selection == 2 {
            selection:= cli::printPlayersAndSelect(size, ColorBlack);
            game*.selectPlayer(ColorBlack, selection);
            selection = cli::printPlayersAndSelect(size, ColorWhite);
            game*.selectPlayer(ColorWhite, selection);
            cliInterface.print("Players selected.");
        } else if selection == 3 {
            game*.playOne();
        } else if selection == 4 {
            game*.trainBlack();
        } else if selection == 5 {
            game*.evaluate();
        } else if selection == 9 {
            createAi();
        } else {
            cliInterface.print("Invalid selection.");
        }
    } while !exit;
  return 0;
}

int main(int argc, char *argv[]) {
    if (argc > 1 && static_cast<std::string>(argv[1]) == "nogui") {
        try { // CPP2 workaround: Try catch not yet supported.
            return cliApp();
        } catch (const std::exception& e) {
            std::cerr << "Caught exception: " << e.what() << std::endl;
        }
    }
    else {
        auto guiInterface = GuiInterface();
        auto game = std::make_unique<Game>(static_cast<Interface*>(&guiInterface));
        auto guiApp = QApplication(argc, argv);
        auto window = Window(static_cast<Interface*>(&guiInterface), game.get());
        guiInterface.window = &window;
        if (argc > 1 && static_cast<std::string>(argv[1]) == "fullscreen") {
            window.showFullScreen();
        } else {
            window.show();
        }
        return guiApp.exec();
    }
    return 0;
}

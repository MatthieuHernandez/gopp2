#include "interface.h2"
#include "window.h"

GuiInterface: type = {
    this: Interface;
    public window: *Window;
    private wantStop: std::atomic<bool> = false;
    private requestedColor: std::atomic<i8>;

    public print:(override inout this, in message: std::string) = {
        window*.addLog(message);
    }

    public printLater:(override inout this, in message: std::string) = {
        window*.addLog(message);
    }

    public softClear:(override inout this) = {}

    public hardClear:(override inout this) = {
        window*.clearLog();
    }

    public refreshGoban:(override inout this, in engine: std::shared_ptr<Engine<9>>) = {
        window*.refreshGoban(engine);
    }

    public refreshGoban:(override inout this, in engine: std::shared_ptr<Engine<13>>) = {
        window*.refreshGoban(engine);
    }

    public refreshGoban:(override inout this, in engine: std::shared_ptr<Engine<19>>) = {
        window*.refreshGoban(engine);
    }

    public wait:(override inout this) = {
    }

    public waitMove:(override inout this, in c: Color) -> Move = {
        requestedColor.store(c.value);
        return window*.waitClickOnGoban();
    }

    public colorTurn:(override inout this) -> Color = {
        return Color(requestedColor.load());
    }

    public stopGame:(override inout this, in stop: bool) = {
        wantStop.store(stop);
    }

    public stopRequested:(override inout this) -> bool = {
        return wantStop.load();
    }
}